name: Docker Image - Workstation

on:
  workflow_dispatch:
  push:
    paths:
      - 'docker/workstation/**'
      - 'provision/ansible/requirements.yml'
      - 'provision/ansible/roles/requirements.yml'
      - 'requirements.txt'
    branches:
      - 'main'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'latest'
  # pull_request:
  #   branches:
  #     - 'main'

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  IMAGE_NAME: homelab-workstation

jobs:
  build:
    name: Build & Push Docker Image - Workstation
    runs-on: [self-hosted, linux, x64]
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # # Install the cosign tool except on PR: https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
      #   with:
      #     cosign-release: 'v1.11.0'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:v0.10.6

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Log into registry ${{ env.REGISTRY }}
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          # images: ${{ github.repository }}
          # tags: |
          #   type=semver,pattern={{version}}
          #   type=semver,pattern={{major}}.{{minor}}
          #   type=raw,value=dev-{{date 'YYYYMMDDhhmm'}}.{{sha}},enable=${{ github.ref_type != 'tag' }}

      # - name: Build, tag, and push the image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      #     IMAGE_TAG: latest
      #   run: |
      #     # Build a docker container and push it to ECR 
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     echo "Pushing image to ECR..."
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/workstation/Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Don't push on PR
          # push: true
          # push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Sign the image with cosign
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Create release
        uses: josephrodriguez/swift-release@v1.1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }} 
