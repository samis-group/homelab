---
#######################################
### THIS FILE IS MANAGED BY ANSIBLE ###
###    PLEASE MAKE CHANGES THERE    ###
#######################################

version: "3.7"

########################### EXTENSION FIELDS

# Default TZ, uid and pid
# To use this put this block in your service: "<<: *default-tz-uid-gid"
x-environment: &default-tz-uid-gid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# To use this put this block in your service: "<<: *logging"
x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://${SERVER_IP}:${LOKI_PORT}/loki/api/v1/push"

########################### NETWORKS

networks:
  traefik_proxy:
    name: traefik_proxy
    external: true

########################### VOLUMES

volumes:
  tv:
    driver_opts:
      type: "nfs"
      o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
      device: ":${NAS_TV_PATH}"
  movies:
    driver_opts:
      type: "nfs"
      o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
      device: ":${NAS_MOVIES_PATH}"
  downloads:
    driver_opts:
      type: "nfs"
      o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
      device: ":${NAS_DOWNLOADS_PATH}"
  syncthing:
    driver_opts:
      type: "nfs"
      o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
      device: ":${NAS_SYNCTHING_PATH}"
  plex_data:
    driver: local # Must be set to avoid issues.
    driver_opts:
      type: "nfs"
      o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
      device: ":${NAS_DOCKER_DATA_PATH}"
  # shared_data:
  #   driver_opts:
  #     type: "nfs"
  #     o: "addr=${NAS_IP},wsize=65536,rsize=65536,timeo=60,nolock,soft,rw"
  #     device: ":${NAS_DOCKER_DATA_PATH}/shared"

########################### SECRETS

secrets:
  plex_claim:
    file: ${DOCKERDIR}/secrets/plex_claim

########################### SERVICES

services:
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    # init: true
    restart: always
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.155 # You can specify a static IP - I also created a non-proxied DNS record like 'plex-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    # network_mode: host
    ports:
      - "${PLEX_PORT}:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      # - "1900:1900/udp" # conflicts with unifi and hass, uncomment when I move to k3s deployments
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "$PLEX_WEB_TOOLS_PORT:33400"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
      - PLEX_CLAIM=${PLEX_CLAIM} # YOU NEED THIS EVERY TIME YOU BUILD A NEW INSTALL
      - ADVERTISE_IP=http://${SERVER_IP}:32400/
      - ALLOWED_NETWORKS=10.0.0.0/24,10.10.0.0/24,10.4.0.0/24,192.168.90.0/24,192.168.91.0/24
    volumes:
      - ${DOCKERDIR}/appdata/plex:/config
      - movies:/data/movies
      - tv:/data/tv
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM. Otherwise, disk:
      # Optional: separate volumes as it's where I'll be storing metadata to severely reduce the space required when I backup these containers
      - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Cache:/config/Library/Application Support/Plex Media Server/Cache
      - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Metadata:/config/Library/Application Support/Plex Media Server/Metadata
      - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Media:/config/Library/Application Support/Plex Media Server/Media
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"
    <<: *logging

  # # Plex - Media Server
  # # https://hub.docker.com/r/plexinc/pms-docker
  # plexms:
  #   container_name: plexms
  #   image: plexinc/pms-docker:plexpass
  #   init: true
  #   restart: always
  #   healthcheck:
  #     test: curl -sI http://localhost:32400
  #     interval: 60s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     traefik_proxy:
  #       ipv4_address: 192.168.90.150 # You can specify a static IP - I also created a non-proxied DNS record like 'plex-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
  #   # devices:
  #     # - /dev/dri:/dev/dri # for harware transcoding
  #   security_opt:
  #     - no-new-privileges:true
  #   ports:
  #     - "${PLEX_PORT}:32400/tcp"
  #     - "3005:3005/tcp"
  #     - "8324:8324/tcp"
  #     - "32469:32469/tcp"
  #     # - "1900:1900/udp" # conflicts with unifi and hass, uncomment when I move to k3s deployments
  #     - "32410:32410/udp"
  #     - "32412:32412/udp"
  #     - "32413:32413/udp"
  #     - "32414:32414/udp"
  #     # - "$PLEX_WEB_TOOLS_PORT:33400"
  #   volumes:
  #     - ${DOCKERDIR}/appdata/plexms:/config
  #     - movies:/data/movies
  #     - tv:/data/tv
  #     - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM. Otherwise, disk:
  #     # Optional: separate volumes as it's where I'll be storing metadata to severely reduce the space required when I backup these containers
  #     - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Cache:/config/Library/Application Support/Plex Media Server/Cache
  #     - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Metadata:/config/Library/Application Support/Plex Media Server/Metadata
  #     - ${DOCKERDIR}/appdata/shared/plexms/Library/Application Support/Plex Media Server/Media:/config/Library/Application Support/Plex Media Server/Media
  #   environment:
  #     PLEX_UID: ${PUID}
  #     PLEX_GID: ${PGID}
  #     TZ: ${TZ}
  #     HOSTNAME: "DockerPlex"
  #     PLEX_CLAIM: ${PLEX_CLAIM}
  #     # PLEX_CLAIM_FILE: /run/secrets/plex_claim
  #     ADVERTISE_IP: http://${SERVER_IP}:32400/
  #   secrets:
  #     # Grab claim from -> https://www.plex.tv/claim/
  #     - plex_claim
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.plexms-rtr.entrypoints=https"
  #     - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.plexms-rtr.service=plexms-svc"
  #     - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"
  #   <<: *logging

  # Overseerr
  # https://hub.docker.com/r/sctx/overseerr
  overseerr:
    container_name: overseerr
    image: sctx/overseerr:latest
    init: true
    restart: always
    healthcheck:
      test: nc -z localhost 5055
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.162 # You can specify a static IP - I also created a non-proxied DNS record like 'sonarr-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    ports:
      - ${OVERSEERR_PORT}:5055
    volumes:
      - ${DOCKERDIR}/appdata/overseerr:/app/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=https"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.$DOMAINNAME`, `tv.$DOMAINNAME`)"
      ## Middlewares
      # - "traefik.http.routers.overseerr-rtr.middlewares=chain-authelia@file"
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"
    <<: *logging

  # Radarr - Movie management
  # https://hub.docker.com/r/linuxserver/radarr
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    container_name: radarr
    image: linuxserver/radarr
    # init: true
    restart: always
    # healthcheck:
    #   test: curl -sI http://localhost:7878
    #   interval: 60s
    #   timeout: 3s
    #   retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.167 # You can specify a static IP - I also created a non-proxied DNS record like 'radarr-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    security_opt:
      - no-new-privileges:true
    ports:
      - ${RADARR_PORT}:7878
    volumes:
      # Media cover is a separate volume as it's where I'll be storing metadata to severely reduce the space required when I backup these containers
      - ${DOCKERDIR}/appdata/shared/radarr/MediaCover:/config/MediaCover
      - ${DOCKERDIR}/appdata/radarr:/config
      - downloads:/downloads
      - movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"
    <<: *logging

  # Sonarr - TV Shows management
  # https://hub.docker.com/r/linuxserver/sonarr
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr
    # init: true
    restart: always
    healthcheck:
      test: curl -sI http://localhost:8989
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.164 # You can specify a static IP - I also created a non-proxied DNS record like 'sonarr-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    security_opt:
      - no-new-privileges:true
    ports:
      - ${SONARR_PORT}:8989
    volumes:
      # Media cover is a separate volume as it's where I'll be storing metadata to severely reduce the space required when I backup these containers
      - ${DOCKERDIR}/appdata/shared/sonarr/MediaCover:/config/MediaCover
      - ${DOCKERDIR}/appdata/sonarr:/config
      - downloads:/downloads
      - tv:/tv
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
    <<: *logging

  # Prowlarr - Torrent proxy
  # https://hub.docker.com/r/linuxserver/prowlarr
  prowlarr:
    container_name: prowlarr
    image: ghcr.io/linuxserver/prowlarr:develop
    # init: true
    restart: always
    healthcheck:
      test: curl -sI http://localhost:9696
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.168 # You can specify a static IP - I also created a non-proxied DNS record like 'radarr-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    ports:
     - "${PROWLARR_PORT}:9696"
    volumes:
      - ${DOCKERDIR}/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.prowlarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr-bypass.rule=Host(`prowlarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$PROWLARR_API_KEY`) || Query(`apikey`, `$PROWLARR_API_KEY`))"
      - "traefik.http.routers.prowlarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME`)"
      - "traefik.http.routers.prowlarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.routers.prowlarr-rtr-bypass.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"
    <<: *logging

  # Bazarr - Subtitle Management
  # https://hub.docker.com/r/linuxserver/bazarr
  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr
    # init: true
    restart: always
    healthcheck:
      test: curl -sI http://localhost:6767  # Healthcheck works on the IP associated with the container
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - ${BAZARR_PORT}:6767
    volumes:
      - ${DOCKERDIR}/appdata/bazarr:/config
      - movies:/movies
      - tv:/tv
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr-bypass.rule=Host(`bazarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$BAZARR_API_KEY`) || Query(`apikey`, `$BAZARR_API_KEY`))"
      - "traefik.http.routers.bazarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      - "traefik.http.routers.bazarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.routers.bazarr-rtr-bypass.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"
    <<: *logging

  # Tautulli - Plex statistics and monitoring
  # https://hub.docker.com/r/linuxserver/tautulli
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    # init: true
    restart: always
    healthcheck:
      test: curl -sI http://localhost:8181
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.142 # You can specify a static IP - I also created a non-proxied DNS record like 'tautulli-dc.domain.com' pointing to this IP so i don't need to reference this all the time.
    security_opt:
      - no-new-privileges:true
    ports:
      - ${TAUTULLI_PORT}:8181
    volumes:
      - ${DOCKERDIR}/appdata/tautulli/config:/config
      - ${DOCKERDIR}/appdata/tautulli/logs:/logs:ro
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr-bypass.rule=Host(`tautulli.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$TAUTULLI_API_KEY`) || Query(`apikey`, `$TAUTULLI_API_KEY`))"
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
    <<: *logging

  # Syncthing
  # https://hub.docker.com/r/linuxserver/syncthing
  syncthing:
    container_name: syncthing
    image: lscr.io/linuxserver/syncthing
    # init: true
    restart: always
    hostname: syncthing   # optional
    healthcheck:
      test: nc -z localhost 8384
      interval: 60s
      timeout: 3s
      retries: 3
    networks:
      - traefik_proxy
      # - defaulty
    # hostname: syncthing # optional
    ports:
      - ${SYNCTHING_PORT}:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    volumes:
      - ${DOCKERDIR}/appdata/syncthing:/config
      - syncthing:/data
    environment:
      <<: *default-tz-uid-gid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.syncthing-rtr.entrypoints=https"
      - "traefik.http.routers.syncthing-rtr.rule=Host(`syncthing.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.syncthing-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.syncthing-rtr.service=syncthing-svc"
      - "traefik.http.services.syncthing-svc.loadbalancer.server.port=8384"
    <<: *logging

  # # MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
  # # https://hub.docker.com/r/jlesage/mkvtoolnix
  # mkvtoolnix:
  #   container_name: mkvtoolnix
  #   image: jlesage/mkvtoolnix:latest
  #   init: true
  #   restart: unless-stopped
  #   healthcheck:
  #     test: nc -z localhost 5800
  #     interval: 60s
  #     timeout: 3s
  #     retries: 3
  #   networks:
  #     traefik_proxy:
  #   # ports:
  #   #   - "$MKVTOOLNIX_PORT:5800"
  #   volumes:
  #     - downloads:/data/downloads
  #     - ${DOCKERDIR}/appdata/mkvtoolnix/config:/config:rw
  #   environment:
  #     USER_ID: ${PUID}
  #     GROUP_ID: ${PGID}
  #     TZ: ${TZ}
  #     UMASK: 002
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.mkvtoolnix-rtr.entrypoints=https"
  #     - "traefik.http.routers.mkvtoolnix-rtr.rule=Host(`mkvtoolnix.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.mkvtoolnix-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.mkvtoolnix-rtr.service=mkvtoolnix-svc"
  #     - "traefik.http.services.mkvtoolnix-svc.loadbalancer.server.port=5800"
  #   <<: *logging
