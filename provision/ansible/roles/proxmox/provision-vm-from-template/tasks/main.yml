---
- name: Setup cloudflare DNS for VM's
  community.general.cloudflare_dns:
    zone: "{{ domain_name }}"
    record: "{{ vm.name | default(inventory_hostname_short) }}"
    type: A
    value: "{{ vm_ip_address }}"
    api_token: "{{ cloudflare_api_token }}"
  when: create_dns

- name: Clone template to new VM's
  proxmox_kvm:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "localhost"
    proxmox_default_behavior: "{{ vm_defaults.default_behavior | default('compatibility') }}"
    validate_certs: "{{ vm_defaults.validate_certs | default(omit) }}"
    name: "{{ vm.name | default(inventory_hostname_short) }}"
    newid: "{{ vm.id | default(omit) }}"
    clone: "{{ vm.template | default(vm_defaults.template) }}"
    full: "yes"
    storage: "{{ vm.storage | default(vm_defaults.storage) }}"
    timeout: "{{ vm_defaults.timeout | default(omit) }}"
    target: "{{ vm_defaults.clone_target | default(omit) }}"
  register: cloned_vm

- name: Pause for 30s to acquire lock
  pause:
    prompt: "Pausing for 30s to acquire lock"
    seconds: 30

- name: Post-clone configuration - update virtual machine resources
  proxmox_kvm:
    update: true
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "localhost"
    proxmox_default_behavior: "{{ vm_defaults.default_behavior | default('compatibility') }}"
    validate_certs: "{{ vm_defaults.validate_certs | default(omit) }}"
    name: "{{ vm.name | default(inventory_hostname_short) }}"
    vmid: "{{ vm.id | default(omit) }}"
    timeout: "{{ vm_defaults.timeout | default(omit) }}"
    description: "{{ vm.description | default(omit) }}"
    kvm: "{{ vm.hardware_virtualization | default(omit) }}"
    ostype: "{{ vm.ostype | default(omit) }}"
    sockets: "{{ vm.sockets | default(omit) }}"
    cores: "{{ vm.cores | default(vm_defaults.cores) }}"
    cpu: "{{ vm.cpu | default(omit) }}"
    cpuunits: "{{ vm.cpu_units | default(omit) }}"
    cpulimit: "{{ vm.cpu_limit | default(omit) }}"
    memory: "{{ vm.memory | default(vm_defaults.memory) }}"
    balloon: "{{ vm.balloon | default(omit) }}"
    vga: "{{ vm.vga | default(vm_defaults.vga) }}"
    acpi: "{{ vm.acpi | default(omit) }}"
    # Can't perform OS operations unless qemu-guest-agent is installed, so leave this off until VM is bootstrapped and do it afterwards
    # agent: "{%- if (vm.agent is defined) -%}{{ vm.agent }}
    #         {%- elif (vm_defaults.agent is defined) -%}{{ vm_defaults.agent }}
    #         {%- else -%}{{ omit }}
    #         {%- endif -%}"
    args: "{{ vm.args | default(omit) }}"
    autostart: "{{ vm.autostart | default(omit) }}"
    bios: "{{ vm.bios | default(omit) }}"
    boot: "{{ vm.boot_order | default(vm_defaults.boot_order) }}"
    bootdisk: "{{ vm.boot_disk | default(vm_defaults.boot_disk) }}"
    citype: "{{ vm.citype | default(omit) }}"
    cicustom: "{{ vm.cicustom | default(omit) }}"
    ciuser: "{{ vm.user | default(vm_defaults.user) }}"
    cipassword: "{{ vm.password | default(vm_defaults.password) }}"
    sshkeys: "{{ vm.ssh_key | default(vm_defaults.ssh_key) }}"
    ipconfig: "{{ vm.ipconfig | default(vm_defaults.ipconfig) }}"
    nameservers: "{{ vm.nameservers | default(vm_defaults.nameservers) }}"
    searchdomains: "{{ vm.search_domains | default(omit) }}"
    delete: "{{ vm.delete | default(omit) }}"
    digest: "{{ vm.digest | default(omit) }}"
    force: "{{ vm.force | default(omit) }}"
    freeze: "{{ vm.freeze | default(omit) }}"
    hostpci: "{{ vm.hostpci | default(omit) }}"
    hotplug: "{{ vm.hotplug | default(omit) }}"
    hugepages: "{{ vm.hugepages | default(omit) }}"
    keyboard: "{{ vm.keyboard | default(omit) }}"
    localtime: "{{ vm.localtime | default(omit) }}"
    lock: "{{ vm.lock | default(omit) }}"
    machine: "{{ vm.machine | default(omit) }}"
    migrate_downtime: "{{ vm.migrate_downtime | default(omit) }}"
    migrate_speed: "{{ vm.migrate_speed | default(omit) }}"
    numa: "{{ vm.numa | default(omit) }}"
    numa_enabled: "{{ vm.numa_enabled | default(omit) }}"
    onboot: "{{ vm.onboot | default(omit) }}"
    parallel: "{{ vm.parallel | default(omit) }}"
    pool: "{{ vm.pool | default(omit) }}"
    protection: "{{ vm.protection | default(omit) }}"
    reboot: "{{ vm.reboot | default(omit) }}"
    revert: "{{ vm.revert | default(omit) }}"
    scsihw: "{{ vm.scsihw | default(omit) }}"
    serial: "{{ vm.serial | default(vm_defaults.serial) }}"
    shares: "{{ vm.shares | default(omit) }}"
    skiplock: "{{ vm.skiplock | default(omit) }}"
    smbios: "{{ vm.smbios | default(omit) }}"
    startdate: "{{ vm.startdate | default(omit) }}"
    startup: "{{ vm.startup | default(omit) }}"
    state: "{{ vm.state | default(omit) }}"
    tablet: "{{ vm.tablet | default(omit) }}"
    tags: "{{ vm.tags | default(omit) }}"
    tdf: "{{ vm.tdf | default(omit) }}"
    vcpus: "{{ vm.vcpus | default(omit) }}"
    watchdog: "{{ vm.watchdog | default(omit) }}"
  when: cloned_vm.changed

- name: Expand disks for each VM to their configured amount
  shell:
    cmd: "qm resize {{ vm.id }} {{ vm.boot_disk | default(vm_defaults.boot_disk) }} {{ vm.hdd_size | default(vm_defaults.hdd_size) }}"
  when: cloned_vm.changed
  delegate_to: proxmox

- name: 'Start VM'
  proxmox_kvm:
    node: "{{ proxmox_node }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_pass }}"
    api_host: "localhost"
    name: "{{ vm.name | default(inventory_hostname_short) }}"
    state: started
  when: cloned_vm.changed

- name: Wait until VM's are started
  wait_for:
    port: 22
    host: "{{ vm_ip_address }}"
    search_regex: OpenSSH
    # Cloud-init bootstraps by apt updating, and doing other bits and Openssh generally comes up before it finishes.
    # we need to give cloud-init time to populate facts to ansible, otherwise it exists early, hence 60s wait before cloud-init check below.
    delay: 20
  delegate_to: localhost
  when: cloned_vm.changed

- name: Wait for cloud init to finish
  community.general.cloud_init_data_facts:
    filter: status
  when: cloned_vm.changed
  register: ci_result
  delegate_to: "{{ vm_ip_address | default(inventory_hostname) }}"
  remote_user: "{{ main_user }}"  # Run as main_user on k3s node
  until: "ci_result.cloud_init_data_facts.status.v1['modules-final'].finished is defined and ci_result.cloud_init_data_facts.status.v1['modules-final'].finished | float | round(0) != 0"
  retries: 100
  delay: 5

# After successful creation and bootstrapping, we want to remove the cloud init drive.
# It is defined in the defaults, if it changes device name/numbering, adjust there.
- name: Remove Cloud-init drives from VM
  shell:
    cmd: "qm set {{ vm.id }} --delete {{ vm.cloudinit_drive | default(vm_defaults.cloudinit_drive) }}"
  when: cloned_vm.changed
  delegate_to: proxmox
