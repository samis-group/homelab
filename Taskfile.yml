---
# https://taskfile.dev/usage/
# https://github.com/go-task/task

version: "3"

set: [pipefail]
# shopt: [globstar]

vars:
  PROJECT_DIR:
    sh: git rev-parse --show-toplevel
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  USER_HOME_DIR:
    sh: echo $HOME
  USER_ID:
    sh: id -u
  GROUP_ID:
    sh: id -g
  # Check if running as root, omit `sudo` from make targets if that is the case.
  DO_SUDO:
    sh: if [ "$UID" -ne 0 ]; then echo "sudo"; fi
  # Ansible vars are inherited in many taskfiles, so leave them here in main taskfile.
  ANSIBLE_DIR: "{{.PROJECT_DIR}}/provision/ansible"
  ANSIBLE_PLAYBOOK_DIR: "{{.ANSIBLE_DIR}}/playbooks"
  ANSIBLE_INVENTORY_DIR: "{{.ANSIBLE_DIR}}/inventory"
  # ANSIBLE_INVENTORY_FILENAME: "generated.yml"
  # ANSIBLE_INVENTORY_CMD: "-i {{.ANSIBLE_INVENTORY_DIR}}/{{.ANSIBLE_INVENTORY_FILENAME}}"
  ANSIBLE_INVENTORY_CMD: "-i {{.ANSIBLE_INVENTORY_DIR}}/doppler_inventory.py"
  ANSIBLE_CMD: "doppler run -- ansible {{.ANSIBLE_INVENTORY_CMD}}"
  ANSIBLE_PLAYBOOK_CMD: "doppler run -- ansible-playbook {{.ANSIBLE_INVENTORY_CMD}}"
  K3S_ANSIBLE_DIR: "{{.PROJECT_DIR}}/provision/k3s-ansible"
  K3S_ANSIBLE_INVENTORY_CMD: "-i {{.K3S_ANSIBLE_DIR}}/inventory/{{.ANSIBLE_INVENTORY_FILENAME}}"
  # K3S_ANSIBLE_INVENTORY_CMD: "-i {{.ANSIBLE_INVENTORY_DIR}}/doppler_inventory.py"
  K3S_ANSIBLE_CMD: "doppler run -- ansible {{.K3S_ANSIBLE_INVENTORY_CMD}}"
  K3S_ANSIBLE_PLAYBOOK_CMD: "doppler run -- ansible-playbook {{.K3S_ANSIBLE_INVENTORY_CMD}}"
  KUBECONFIG_DIR: "{{.USER_HOME_DIR}}/.kube"
  TF_CLI_CONFIG_FILE_DIR: "{{.USER_HOME_DIR}}/.terraform.d"

env:
  KUBECONFIG: "{{.KUBECONFIG_DIR}}/config"
  PATH: "{{.PATH}}:{{.PROJECT_DIR}}/bin"  # add project bin to path
  PROJECT_DIR: "{{.PROJECT_DIR}}"
  ANSIBLE_CONFIG: "{{.ANSIBLE_DIR}}/ansible.cfg"
  TF_CLI_CONFIG_FILE: "{{.TF_CLI_CONFIG_FILE_DIR}}/credentials.tfrc.json"
  DOPPLER_SECRET_INVENTORY: "ANSIBLE_HOSTS_INVENTORY"

includes:
  ansible:
    taskfile: .taskfiles/Ansible.yml
    aliases: ["a", "ans"]
  docker:
    taskfile: .taskfiles/Docker.yml
    aliases: ["d"]
  doppler:
    taskfile: .taskfiles/Doppler.yml
    aliases: ["dp"]
  flux:
    taskfile: .taskfiles/Flux.yml
    aliases: ["f"]
  internal:
    taskfile: .taskfiles/internal.yml
    internal: true
  k3s:
    taskfile: .taskfiles/K3s.yml
    aliases: ["k"]
  kubectl:
    taskfile: .taskfiles/Kubectl.yml
    aliases: ["kc"]
  lxc:
    taskfile: .taskfiles/Lxc.yml
    aliases: ["l"]
  molecule:
    taskfile: .taskfiles/Molecule.yml
    aliases: ["m"]
  precommit:
    taskfile: .taskfiles/Precommit.yml
    aliases: ["pc"]
  proxmox:
    taskfile: .taskfiles/Proxmox.yml
    aliases: ["p"]
  setup:
    taskfile: .taskfiles/Setup.yml
    aliases: ["s"]
  terraform:
    taskfile: .taskfiles/Terraform.yml
    aliases: ["t", "tf"]
  windows:
    taskfile: .taskfiles/Windows.yml
    aliases: ["win"]
  workstation:
    taskfile: .taskfiles/Workstation.yml
    aliases: ["ws"]
  wsl: .taskfiles/Wsl.yml

tasks:

  all:
    desc: My current entire automation for k3s stack with LXC containers on proxmox w/ flux + tf + ansible etc.
    aliases: ["a"]
    cmds:
      - task: internal:mkdirs-local
      - task: proxmox:main
      - task: lxc:main
      - task: k3s:main

  recreate-k3s:
    desc: Recreate my entire k3s stack
    aliases: ["r"]
    cmds:
      - task: k3s:reset
      - task: k3s:main
      - task: terraform:apply
      - task: flux:install
      - cat ~/.kube/config

#---------#
# Linters #
#---------#

  # check lint:
  #   desc: ðŸ”Ž Run all tests, Linters & formatters (currently will not fix but sets exit code on error)
  #   cmds:
  #     - echo '**** LGTM! ****'

  # _start-check:
  #   desc: Diagnostic output; useful when run in a git hook
  #   cmds:
  #     - echo 'Running "make check / make lint"'

  # yamllint:
  #   desc: Currently the only one.. will add more targets in the future.
  #   cmds:
  #     - yamllint -f parsable .
