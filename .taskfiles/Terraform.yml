---
version: "3"

vars:

  TERRAFORM_DIR: "provision/terraform"
  TF_DIR_CF: "{{.TERRAFORM_DIR}}/cloudflare"
  TF_DIR_PVE: "{{.TERRAFORM_DIR}}/proxmox"
  TF_DIR_DOPPLER: "{{.TERRAFORM_DIR}}/doppler"
  TF_DIR_FLUX: "{{.TERRAFORM_DIR}}/flux"
  TF_VARS_CMD: "-var-file=myvars.tfvars"

tasks:

  login:
    desc: Login to terraform cloud as that is where the state files are stored
    internal: true
    interactive: true
    status:
      - "grep -q 'token' ${TF_CLI_CONFIG_FILE}"
    cmds:
      - "{{.DOCKER_EXEC_CMD}} terraform login"

  output:
    desc: Get output value from terraform. Pass in arg like '-- doppler_token'.
    aliases: ['o']
    dir: "{{.TERRAFORM_DIR}}"
    cmds:
      - echo '{{.CLI_ARGS}} value:' && terraform output -raw {{.CLI_ARGS}} && echo

  tfvars-base:
    desc: Write tfvars file for terraform to use
    # internal: true
    interactive: true
    silent: true
    run: once
    cmds:
      - task: tfvars-write
        vars:
          TFVAR_LOCAL: "doppler_token"
      - task: tfvars-write-kubeconfig-kube_host
      - task: tfvars-write-kubeconfig-kube_ca_cert
      - task: tfvars-write-kubeconfig-kube_client_cert
      - task: tfvars-write-kubeconfig-kube_client_key
      # - task: tfvars-terraform-token

  tfvars-write:
    desc: Write tfvar to file
    dir: provision/terraform
    internal: true
    interactive: true
    status:
      - grep -q '{{.TFVAR_LOCAL}}' myvars.tfvars
    cmds:
      - |
        if [ -n '{{.TFVAR_DATA}}' ]; then
          echo "{{.TFVAR_LOCAL}} = \"{{.TFVAR_DATA}}\"" >> myvars.tfvars
        else
          read -p "Enter the value for variable {{.TFVAR_LOCAL}} to be written to tfvars file: " LOCAL_VAR_TF && echo "{{.TFVAR_LOCAL}} = \"${LOCAL_VAR_TF}\"" >> myvars.tfvars
        fi

  tfvars-write-kubeconfig-kube_host:
    desc: Write kube_host to tfvar file
    dir: provision/terraform
    silent: true
    internal: true
    vars:
      kube_host:
        sh: yq eval '.clusters[].cluster.server' "{{.KUBECONFIG_DIR}}/config"
    preconditions:
      - sh: ls ${KUBECONFIG}
        msg: "Kubeconfig file missing, nothing to process."
    status:
      - grep -q kube_host myvars.tfvars
    cmds:
      - echo "kube_host = \"{{.kube_host}}\"" >> myvars.tfvars

  tfvars-write-kubeconfig-kube_ca_cert:
    desc: Write kube_ca_cert to tfvar file
    dir: provision/terraform
    silent: true
    internal: true
    vars:
      kube_ca_cert:
        sh: yq eval '.clusters[].cluster.certificate-authority-data' "{{.KUBECONFIG_DIR}}/config"
    preconditions:
      - sh: ls ${KUBECONFIG}
        msg: "Kubeconfig file missing, nothing to process."
    status:
      - grep -q kube_ca_cert myvars.tfvars
    cmds:
      - echo "kube_ca_cert = \"{{.kube_ca_cert}}\"" >> myvars.tfvars

  tfvars-write-kubeconfig-kube_client_cert:
    desc: Write kube_client_cert to tfvar file
    dir: provision/terraform
    silent: true
    internal: true
    vars:
      kube_client_cert:
        sh: yq eval '.users[0].user.client-certificate-data' "{{.KUBECONFIG_DIR}}/config"
    preconditions:
      - sh: ls ${KUBECONFIG}
        msg: "Kubeconfig file missing, nothing to process."
    status:
      - grep -q kube_client_cert myvars.tfvars
    cmds:
      - echo "kube_client_cert = \"{{.kube_client_cert}}\"" >> myvars.tfvars

  tfvars-write-kubeconfig-kube_client_key:
    desc: Write kube_client_key to tfvar file
    dir: provision/terraform
    silent: true
    internal: true
    vars:
      kube_client_key:
        sh: yq eval '.users[0].user.client-key-data' "{{.KUBECONFIG_DIR}}/config"
    preconditions:
      - sh: ls ${KUBECONFIG}
        msg: "Kubeconfig file missing, nothing to process."
    status:
      - grep -q kube_client_key myvars.tfvars
    cmds:
      - echo "kube_client_key = \"{{.kube_client_key}}\"" >> myvars.tfvars

  # tfvars-terraform-token:
  #   desc: Write terraform cloud token tfvar
  #   internal: true
  #   cmds:
  #     - task: tfvars-base
  #       vars:
  #         TFVAR_LOCAL: terraform_cloud_token
  #         TFVAR_DOPPLER: TERRAFORM_CLOUD_TOKEN

### Base ###

  init:
    desc: Initialize terraform dependencies
    deps: ['tfvars-base']
    aliases: ['i']
    dir: "{{default .TERRAFORM_DIR .TF_DIR_TODO}}"
    cmds:
      - terraform init {{.TF_VARS_CMD}} {{.CLI_ARGS}}

  plan:
    desc: Show the changes terraform will make
    deps: ['tfvars-base']
    aliases: ['p']
    dir: "{{default .TERRAFORM_DIR .TF_DIR_TODO}}"
    cmds:
      - terraform plan {{.TF_VARS_CMD}} {{.CLI_ARGS}}

  apply:
    desc: Apply the changes
    deps: ['tfvars-base']
    interactive: true
    aliases: ['a']
    dir: "{{default .TERRAFORM_DIR .TF_DIR_TODO}}"
    cmds:
      - terraform apply -auto-approve {{.TF_VARS_CMD}} {{.CLI_ARGS}}

### Extends ###

  bootstrap:
    desc: Bootstrap terraform setting up doppler environment and terraform cloud org + workspaces, before running main terraform that will use these as remote backend for states.
    deps: ['tfvars-base']
    aliases: [bs]
    dir: "provision/terraform/bootstrap"
    run_once: true
    vars:
      TF_VARS_CMD: "-var-file=../myvars.tfvars"
    cmds:
      - terraform init {{.TF_VARS_CMD}} {{.CLI_ARGS}}
      - terraform apply -auto-approve {{.TF_VARS_CMD}} {{.CLI_ARGS}}
