---
version: "3"

tasks:

  main:
    desc: ☸ k3s main play
    dir: provision/k3s-ansible
    deps: [':proxmox:provision-k3s']
    aliases: ["m"]
    cmds:
      - task: :doppler:pull-k3s-ansible-inventory
      - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} site.yml {{.CLI_ARGS}}"
      - task: extra-main
      - task: scp-kubeconfig
      - task: :doppler:push-kubeconfig
      - task: :terraform:bootstrap
      - task: :terraform:init
      - task: :terraform:apply
      - task: :flux:install

  extra-main:
    desc: ☸ k3s main play - extra
    dir: provision/ansible
    internal: true
    cmds:
      - task: :doppler:pull-ansible-inventory
      - "{{.ANSIBLE_PLAYBOOK_CMD}} {{.ANSIBLE_PLAYBOOK_DIR}}/k3s.yml --limit 'k3s-vm1' {{.CLI_ARGS}}"

  dev:
    desc: ☸ k3s dev play
    dir: provision/k3s-ansible
    deps: [':proxmox:provision-k3s-dev']
    aliases: ["md"]
    cmds:
      - task: :doppler:pull-k3s-dev-ansible-inventory
      - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} site.yml {{.CLI_ARGS}}"
      - task: extra-dev
      - task: scp-kubeconfig
        vars:
          K3S_HOST: "10.10.0.34"
          KUBECONFIG_FILE: "config-dev"
      - task: :doppler:push-kubeconfig-dev
      - task: :terraform:bootstrap
      - task: :terraform:tfvars-write
        vars:
          TFVAR_LOCAL: "kubeconfig_file"
          TFVAR_DATA: "~/.kube/config-dev"
      - task: :terraform:init
      - task: :terraform:apply
      - doppler run -- kubectl apply -k ../../kubernetes/home/bootstrap
      - doppler run -- kubectl apply -k ../../kubernetes/home/flux/repositories
      - doppler run -- kubectl apply -k ../../kubernetes/home/apps/kube-system/external-secrets/app/
      - doppler run -- kubectl apply -k ../../kubernetes/home/apps/kube-system/external-secrets/stores/
      - doppler run -- kubectl apply -k ../../kubernetes/home/apps/kube-system/external-secrets/secrets/
      - doppler run -- kubectl create -k ../../kubernetes/home/flux/config/crds
      - doppler run -- kubectl apply -f ../../kubernetes/home/apps/cert-manager/namespace.yaml
      - doppler run -- kubectl apply -k ../../kubernetes/home/apps/cert-manager/cert-manager/app

  extra-dev:
    desc: ☸ k3s dev play - extra
    dir: provision/ansible
    internal: true
    cmds:
      - task: :doppler:pull-ansible-inventory
      - "{{.ANSIBLE_PLAYBOOK_CMD}} {{.ANSIBLE_PLAYBOOK_DIR}}/k3s.yml --limit 'k3s-vm1-dev' {{.CLI_ARGS}}"

  reset:
    desc: ☸ Reset k3s stack from beginning of it's inception
    dir: provision/k3s-ansible
    aliases: ["r"]
    cmds:
      - task: :doppler:generate-k3s-ansible-inventory
      - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} reset.yml {{.CLI_ARGS}}"
      - rm -f {{ .KUBECONFIG_DIR }}/config || true

  watch-kustomizations:
    interactive: true
    cmds:
      - flux get kustomizations --watch

  run-tags:
    desc: ☸ Run only the tags passed in separated by comma (e.g. make run-tags update_compose,logrotate)
    dir: provision/k3s-ansible
    cmds:
      - task: :doppler:generate-k3s-ansible-inventory
      - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} --tags {{.CLI_ARGS}} k3s.yml"

  run-tags-v:
    desc: ☸ VERBOSE - Same as above
    dir: provision/k3s-ansible
    cmds:
      - task: :doppler:generate-k3s-ansible-inventory
      - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} -vvv --tags {{.CLI_ARGS}} k3s.yml"

  # helm-charts:
  #   desc: ☸ Deploy helm charts
  #   dir: provision/k3s-ansible
  #   cmds:
  #     - task: :doppler:generate-k3s-ansible-inventory
  #     - "{{.K3S_ANSIBLE_PLAYBOOK_CMD}} --tags \"helm_charts\" k3s.yml {{.CLI_ARGS}}"

  scp-kubeconfig:
    desc: Copy k3s kube config from single node to local
    aliases: ["s"]
    vars:
      K3S_HOST: '{{default "10.10.0.24" .K3S_HOST}}'
      KUBECONFIG_FILE: '{{default "config" .KUBECONFIG_FILE}}'
    cmds:
      - task: :internal:mkdirs-local
      - rm -f {{ .KUBECONFIG_DIR }}/{{ .KUBECONFIG_FILE }}
      - scp -o StrictHostKeyChecking=no root@{{ .K3S_HOST }}:/root/.kube/config {{ .KUBECONFIG_DIR }}/{{ .KUBECONFIG_FILE }}
      # - test -f /mnt/c/.kube/config || $(sudo mkdir -p /mnt/c/.kube && scp root@10.10.0.24:{{ .KUBECONFIG_DIR }}/config /mnt/c/.kube/config)

  scp-kubeconfig-windows:
    desc: Copy k3s kube config from single node to windows host for Lens to work (must not be run in workstation container)
    aliases: ["sw"]
    status:
      - "test -f /mnt/c/.kube/config"
    cmds:
      - "test -d /mnt/c/.kube || mkdir /mnt/c/.kube"
      - scp root@10.10.0.24:{{ .KUBECONFIG_DIR }}/config /mnt/c/.kube/config
